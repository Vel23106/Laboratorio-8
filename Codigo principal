/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdint.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
int8_t contador1=0;
int8_t contador2=0;
int8_t bloqueoJ=0;
int8_t jugador=0;
int8_t inicio;

int8_t ultimot1=0;
int8_t ultimot2=0;

int8_t estado1=0;
int8_t estado2=0;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive_IT(&huart2, &inicio, 1);
	  	  if (inicio=='S'){
	  		  HAL_GPIO_WritePin(LedR_GPIO_Port,LedR_Pin,1);
	  		  HAL_GPIO_WritePin(LedA_GPIO_Port,LedA_Pin,0);
	  		  HAL_GPIO_WritePin(LedV_GPIO_Port,LedV_Pin,0);
	  		  HAL_Delay(1000);
	  		  HAL_GPIO_WritePin(LedR_GPIO_Port,LedR_Pin,0);
	  		  HAL_GPIO_WritePin(LedA_GPIO_Port,LedA_Pin,1);
	  		  HAL_GPIO_WritePin(LedV_GPIO_Port,LedV_Pin,0);
	  		  HAL_Delay(1000);
	  		  HAL_GPIO_WritePin(LedR_GPIO_Port,LedR_Pin,0);
	  		  HAL_GPIO_WritePin(LedA_GPIO_Port,LedA_Pin,0);
	  		  HAL_GPIO_WritePin(LedV_GPIO_Port,LedV_Pin,1);
	  		  HAL_Delay(1000);
	  		  HAL_GPIO_WritePin(LedR_GPIO_Port,LedR_Pin,0);
	  		  HAL_GPIO_WritePin(LedA_GPIO_Port,LedA_Pin,0);
	  		  HAL_GPIO_WritePin(LedV_GPIO_Port,LedV_Pin,0);
	  		  HAL_Delay(1000);
	  		  bloqueoJ=1;
	  	  }
	  		if (estado1==1 && bloqueoJ==1){
	  			estado1=0;
	  			contador1++;
	  		}
	  		if (estado2==1&& bloqueoJ==1){
	  			estado2=0;
	  			contador2++;
	  		}

		  	  switch(contador1){
		  		  case 0:
		  			  HAL_GPIO_WritePin(Led1c1_GPIO_Port,Led1c1_Pin, 0);
		  			  HAL_GPIO_WritePin(Led2c1_GPIO_Port,Led2c1_Pin, 0);
		  			  HAL_GPIO_WritePin(Led3c1_GPIO_Port,Led3c1_Pin, 0);
		  			  HAL_GPIO_WritePin(Led4c1_GPIO_Port,Led4c1_Pin, 0);
		  			  break;
		  		  case 1:
		  			  HAL_GPIO_WritePin(Led1c1_GPIO_Port,Led1c1_Pin, 1);
		  			  HAL_GPIO_WritePin(Led2c1_GPIO_Port,Led2c1_Pin, 0);
		  			  HAL_GPIO_WritePin(Led3c1_GPIO_Port,Led3c1_Pin, 0);
		  			  HAL_GPIO_WritePin(Led4c1_GPIO_Port,Led4c1_Pin, 0);
		  			  break;
		  		  case 2:
					  HAL_GPIO_WritePin(Led1c1_GPIO_Port,Led1c1_Pin, 0);
					  HAL_GPIO_WritePin(Led2c1_GPIO_Port,Led2c1_Pin, 1);
					  HAL_GPIO_WritePin(Led3c1_GPIO_Port,Led3c1_Pin, 0);
					  HAL_GPIO_WritePin(Led4c1_GPIO_Port,Led4c1_Pin, 0);
					  break;
		  		  case 3:
		  			  HAL_GPIO_WritePin(Led1c1_GPIO_Port,Led1c1_Pin, 0);
		  			  HAL_GPIO_WritePin(Led2c1_GPIO_Port,Led2c1_Pin, 0);
		  			  HAL_GPIO_WritePin(Led3c1_GPIO_Port,Led3c1_Pin, 1);
		  			  HAL_GPIO_WritePin(Led4c1_GPIO_Port,Led4c1_Pin, 0);
		  			  break;
		  		  case 4:
		  			  HAL_GPIO_WritePin(Led1c1_GPIO_Port,Led1c1_Pin, 0);
		  			  HAL_GPIO_WritePin(Led2c1_GPIO_Port,Led2c1_Pin, 0);
		  			  HAL_GPIO_WritePin(Led3c1_GPIO_Port,Led3c1_Pin, 0);
		  			  HAL_GPIO_WritePin(Led4c1_GPIO_Port,Led4c1_Pin, 1);
		  			  break;
		  	  }
		  	  switch(contador2){
				  case 0:
					  HAL_GPIO_WritePin(Led1c2_GPIO_Port,Led1c2_Pin, 0);
					  HAL_GPIO_WritePin(Led2c2_GPIO_Port,Led2c2_Pin, 0);
					  HAL_GPIO_WritePin(Led3c2_GPIO_Port,Led3c2_Pin, 0);
					  HAL_GPIO_WritePin(Led4c2_GPIO_Port,Led4c2_Pin, 0);
					  break;
				  case 1:
					  HAL_GPIO_WritePin(Led1c2_GPIO_Port,Led1c2_Pin, 1);
					  HAL_GPIO_WritePin(Led2c2_GPIO_Port,Led2c2_Pin, 0);
					  HAL_GPIO_WritePin(Led3c2_GPIO_Port,Led3c2_Pin, 0);
					  HAL_GPIO_WritePin(Led4c2_GPIO_Port,Led4c2_Pin, 0);
					  break;
				  case 2:
					  HAL_GPIO_WritePin(Led1c2_GPIO_Port,Led1c2_Pin, 0);
					  HAL_GPIO_WritePin(Led2c2_GPIO_Port,Led2c2_Pin, 1);
					  HAL_GPIO_WritePin(Led3c2_GPIO_Port,Led3c2_Pin, 0);
					  HAL_GPIO_WritePin(Led4c2_GPIO_Port,Led4c2_Pin, 0);
					  break;
				  case 3:
					  HAL_GPIO_WritePin(Led1c2_GPIO_Port,Led1c2_Pin, 0);
					  HAL_GPIO_WritePin(Led2c2_GPIO_Port,Led2c2_Pin, 0);
					  HAL_GPIO_WritePin(Led3c2_GPIO_Port,Led3c2_Pin, 1);
					  HAL_GPIO_WritePin(Led4c2_GPIO_Port,Led4c2_Pin, 0);
					  break;
				  case 4:
					  HAL_GPIO_WritePin(Led1c2_GPIO_Port,Led1c2_Pin, 0);
					  HAL_GPIO_WritePin(Led2c2_GPIO_Port,Led2c2_Pin, 0);
					  HAL_GPIO_WritePin(Led3c2_GPIO_Port,Led3c2_Pin, 0);
					  HAL_GPIO_WritePin(Led4c2_GPIO_Port,Led4c2_Pin, 1);
					  break;
	  	  }
		  	if (contador1 >= 4 && jugador == 0) {
		  		jugador = 1;
		  	    bloqueoJ = 0; // bloquear botones
		  	    char msg[] = "Jugador 1 GANA\r\n";
		  	    HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg)-1, HAL_MAX_DELAY);
		  	    contador1=0;
		  	    contador2=0;
		  	}

		  	if (contador2 >= 4 && jugador == 0) {
		  		jugador = 2;
		  	    bloqueoJ = 0; // bloquear botones
		  	    char msg[] = "Jugador 2 GANA\r\n";
		  	    HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg)-1, HAL_MAX_DELAY);
		  	    contador1=0;
		  	  	contador2=0;
		  	}


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Led3c1_Pin|Led2c1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LedR_Pin|LedA_Pin|LedV_Pin|LD2_Pin
                          |Led3c2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led1c1_Pin|Led4c1_Pin|Led1c2_Pin|Led2c2_Pin
                          |Led4c2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : Led3c1_Pin Led2c1_Pin */
  GPIO_InitStruct.Pin = Led3c1_Pin|Led2c1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : LedR_Pin LedA_Pin LedV_Pin LD2_Pin
                           Led3c2_Pin */
  GPIO_InitStruct.Pin = LedR_Pin|LedA_Pin|LedV_Pin|LD2_Pin
                          |Led3c2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : Led1c1_Pin Led4c1_Pin Led1c2_Pin Led2c2_Pin
                           Led4c2_Pin */
  GPIO_InitStruct.Pin = Led1c1_Pin|Led4c1_Pin|Led1c2_Pin|Led2c2_Pin
                          |Led4c2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : BT1_Pin */
  GPIO_InitStruct.Pin = BT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BT1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : BT2_Pin */
  GPIO_InitStruct.Pin = BT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BT2_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	uint32_t tiempo_actual = HAL_GetTick();
	if(GPIO_Pin == BT1_Pin){
		if (tiempo_actual - ultimot1 > 300){
			estado1 = 1;
			ultimot1 = tiempo_actual;
		}
	}
	if(GPIO_Pin == BT2_Pin){
		if (tiempo_actual - ultimot2 > 300){
			estado2 = 1;
			ultimot2 = tiempo_actual;
		}
	}

}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
